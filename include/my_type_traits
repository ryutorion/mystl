// -*- C++ -*-
#ifndef MY_TYPE_TRAITS_INCLUDED
#define MY_TYPE_TRAITS_INCLUDED

namespace my
{
	template <class T, T v>
	struct integral_constant
	{
		static constexpr T value = v;
		using value_type = T;
		using type = integral_constant<T, v>;
		constexpr operator value_type() const noexcept { return value; }
		constexpr value_type operator ()() const noexcept { return value; }
	};

	template <bool B>
	using bool_constant = integral_constant<bool, B>;
	using true_type = bool_constant<true>;
	using false_type = bool_constant<false>;

	template <class...>
	using void_t = void;

	template <bool B, class T = void>
	struct enable_if
	{};

	template <class T>
	struct enable_if<true, T>
	{
		using type = T;
	};

	template <bool B, class T = void>
	using enable_if_t = typename enable_if<B, T>::type;

	template <bool B, class T, class F>
	struct conditional
	{
		using type = F;
	};

	template <class T, class F>
	struct conditional<true, T, F>
	{
		using type = T;
	};

	template <bool B, class T, class F>
	using conditional_t = typename conditional<B, T, F>::type;

	template <class T, class U>
	struct is_same : false_type {};

	template <class T>
	struct is_same<T, T> : true_type {};

	template <class T, class U>
	inline constexpr bool is_same_v = is_same<T, U>::value;

	template <class T>
	struct remove_const
	{
		using type = T;
	};

	template <class T>
	struct remove_const<const T>
	{
		using type = T;
	};

	template <class T>
	using remove_const_t = typename remove_const<T>::type;

	template <class T>
	struct add_const
	{
#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4180)
#endif

		using type = const T;

#ifdef _MSC_VER
#pragma warning(pop)
#endif
	};

	template <class T>
	using add_const_t = typename add_const<T>::type;

	template <class T>
	struct remove_volatile
	{
		using type = T;
	};

	template <class T>
	struct remove_volatile<volatile T>
	{
		using type = T;
	};

	template <class T>
	using remove_volatile_t = typename remove_volatile<T>::type;

	template <class T>
	struct add_volatile
	{
		using type = volatile T;
	};

	template <class T>
	using add_volatile_t = typename add_volatile<T>::type;

	template <class T>
	struct remove_cv
	{
		using type = remove_volatile_t<remove_const_t<T>>;
	};

	template <class T>
	using remove_cv_t = typename remove_cv<T>::type;

	template <class T>
	struct add_cv
	{
		using type = add_const_t<add_volatile_t<T>>;
	};

	template <class T>
	using add_cv_t = typename add_cv<T>::type;

	template <class T>
	struct remove_reference
	{
		using type = T;
	};

	template <class T>
	struct remove_reference<T &>
	{
		using type = T;
	};

	template <class T>
	struct remove_reference<T &&>
	{
		using type = T;
	};

	template <class T>
	using remove_reference_t = typename remove_reference<T>::type;

	template <class T>
	struct add_lvalue_reference
	{
		using type = remove_reference_t<T> &;
	};

	template <class T>
	using add_lvalue_reference_t = typename add_lvalue_reference<T>::type;

	template <class T>
	struct add_rvalue_reference
	{
		using type = remove_reference_t<T> &&;
	};

	template <class T>
	struct add_rvalue_reference<T &>
	{
		using type = T &;
	};

	template <class T>
	using add_rvalue_reference_t = typename add_rvalue_reference<T>::type;

	template <class T>
	struct remove_extent
	{
		using type = T;
	};

	template <class T>
	struct remove_extent<T []>
	{
		using type = T;
	};

	template <class T, size_t N>
	struct remove_extent<T [N]>
	{
		using type = T;
	};

	template <class T>
	using remove_extent_t = typename remove_extent<T>::type;

	template <class T>
	struct remove_all_extents
	{
		using type = T;
	};

	template <class T>
	using remove_all_extents_t = typename remove_all_extents<T>::type;

	template <class T>
	struct remove_all_extents<T[]>
	{
		using type = remove_all_extents_t<T>;
	};

	template <class T, size_t N>
	struct remove_all_extents<T[N]>
	{
		using type = remove_all_extents_t<T>;
	};

	template <class T>
	struct remove_pointer
	{
		using type = T;
	};

	template <class T>
	struct remove_pointer<T *>
	{
		using type = T;
	};

	template <class T>
	struct remove_pointer<T * const>
	{
		using type = T;
	};

	template <class T>
	struct remove_pointer<T * volatile>
	{
		using type = T;
	};

	template <class T>
	struct remove_pointer<T * const volatile>
	{
		using type = T;
	};

	template <class... B>
	struct conjunction : true_type {};

	template <class H>
	struct conjunction<H> : conditional_t<static_cast<bool>(H::value), H, H>
	{};

	template <class H, class... T>
	struct conjunction<H, T...> : conditional_t<static_cast<bool>(H::value), conjunction<T...>, H>
	{};

	template <class... B>
	inline constexpr bool conjunction_v = conjunction<B...>::value;

	template <class... B>
	struct disjunction : false_type {};

	template <class H>
	struct disjunction<H> : conditional_t<static_cast<bool>(H::value), H, H>
	{};

	template <class H, class... T>
	struct disjunction<H, T...> : conditional_t<static_cast<bool>(H::value), H, disjunction<T...>>
	{};

	template <class... B>
	inline constexpr bool disjunction_v = disjunction<B...>::value;

	template <class T>
	struct negation : bool_constant<!static_cast<bool>(T::value)> {};

	template <class T>
	inline constexpr bool negation_v = negation<T>::value;

	template <class T>
	using remove_pointer_t = typename remove_pointer<T>::type;

	template <class T>
	struct is_void : bool_constant<is_same_v<remove_cv_t<T>, void>> {};

	template <class T>
	inline constexpr bool is_void_v = is_void<T>::value;

	template <class T>
	struct is_null_pointer : bool_constant<is_same_v<remove_cv_t<T>, std::nullptr_t>> {};

	template <class T>
	inline constexpr bool is_null_pointer_v = is_null_pointer<T>::value;

	template <class T>
	struct is_integral : disjunction<
		is_same<remove_cv_t<T>, bool>,
		is_same<remove_cv_t<T>, char>,
		is_same<remove_cv_t<T>, signed char>,
		is_same<remove_cv_t<T>, unsigned char>,
		is_same<remove_cv_t<T>, wchar_t>,
#ifdef __cpp_char8_t
		is_same<remove_cv_t<T>, char8_t>,
#endif
		is_same<remove_cv_t<T>, char16_t>,
		is_same<remove_cv_t<T>, char32_t>,
		is_same<remove_cv_t<T>, short>,
		is_same<remove_cv_t<T>, unsigned short>,
		is_same<remove_cv_t<T>, int>,
		is_same<remove_cv_t<T>, unsigned int>,
		is_same<remove_cv_t<T>, long>,
		is_same<remove_cv_t<T>, unsigned long>,
		is_same<remove_cv_t<T>, long long>,
		is_same<remove_cv_t<T>, unsigned long long>
	>
	{};

	template <class T>
	inline constexpr bool is_integral_v = is_integral<T>::value;

	template <class T>
	struct is_floating_point : disjunction<
		is_same<remove_cv_t<T>, float>,
		is_same<remove_cv_t<T>, double>,
		is_same<remove_cv_t<T>, long double>
	>
	{};

	template <class T>
	inline constexpr bool is_floating_point_v = is_floating_point<T>::value;

	template <class T>
	struct is_array : false_type {};

	template <class T, size_t N>
	struct is_array<T[N]> : true_type {};

	template <class T>
	struct is_array<T[]> : true_type {};

	template <class T>
	inline constexpr bool is_array_v = is_array<T>::value;

	template <class T>
	struct is_pointer : false_type {};

	template <class T>
	struct is_pointer<T *> : true_type {};

	template <class T>
	struct is_pointer<T * const> : true_type {};

	template <class T>
	struct is_pointer<T * volatile> : true_type {};

	template <class T>
	struct is_pointer<T * const volatile> : true_type {};

	template <class T>
	inline constexpr bool is_pointer_v = is_pointer<T>::value;

	template <class T>
	struct is_lvalue_reference : false_type {};

	template <class T>
	struct is_lvalue_reference<T &> : true_type {};

	template <class T>
	inline constexpr bool is_lvalue_reference_v = is_lvalue_reference<T>::value;

	template <class T>
	struct is_rvalue_reference : false_type {};

	template <class T>
	struct is_rvalue_reference<T &&> : true_type {};

	template <class T>
	inline constexpr bool is_rvalue_reference_v = is_rvalue_reference<T>::value;

	template <class T>
	struct is_reference : disjunction<
		is_lvalue_reference<T>,
		is_rvalue_reference<T>
	>
	{};

	template <class T>
	inline constexpr bool is_reference_v = is_reference<T>::value;

	template <class T>
	struct is_arithmetic : disjunction<
		is_integral<T>,
		is_floating_point<T>
	>
	{};

	template <class T>
	inline constexpr bool is_arithmetic_v = is_arithmetic<T>::value;

	template <class T>
	struct is_fundamental : disjunction<
		is_arithmetic<T>,
		is_void<T>,
		is_null_pointer<T>
	>
	{};

	template <class T>
	inline constexpr bool is_fundamental_v = is_fundamental<T>::value;

	template <class T>
	struct is_union : bool_constant<__is_union(T)> {};

	template <class T>
	inline constexpr bool is_union_v = is_union<T>::value;

	template <class T>
	struct is_enum : bool_constant<__is_enum(T)> {};

	template <class T>
	inline constexpr bool is_enum_v = is_enum<T>::value;

	template <class T>
	struct is_const : false_type
	{};

	template <class T>
	struct is_const<const T> : true_type
	{};

	template <class T>
	inline constexpr bool is_const_v = is_const<T>::value;

	template <class T>
	struct is_volatile : false_type
	{};

	template <class T>
	struct is_volatile<volatile T> : true_type
	{};

	template <class T>
	inline constexpr bool is_volatile_v = is_volatile<T>::value;

#ifdef _MSC_VER
	template <class T>
	struct is_function : false_type
	{};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...)> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) const> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) volatile> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) const volatile> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) &> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) const &> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) volatile &> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) const volatile &> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) &&> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) const &&> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) volatile &&> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) const volatile &&> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) const noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) volatile noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) const volatile noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) & noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) const & noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) volatile & noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) const volatile & noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) && noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) const && noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) volatile && noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) const volatile && noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...)> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) const> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) volatile> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) const volatile> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) &> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) const &> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) volatile &> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) const volatile &> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) &&> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) const &&> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) volatile &&> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) const volatile &&> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) const noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) volatile noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) const volatile noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) & noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) const & noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) volatile & noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) const volatile & noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) && noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) const && noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) volatile && noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) const volatile && noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...)> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) const> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) volatile> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) const volatile> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) &> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) const &> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) volatile &> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) const volatile &> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) &&> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) const &&> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) volatile &&> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) const volatile &&> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) const noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) volatile noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) const volatile noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) & noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) const & noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) volatile & noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) const volatile & noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) && noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) const && noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) volatile && noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) const volatile && noexcept> : true_type {};
#else
	template <class T>
	struct is_function : bool_constant<__is_function(T)> {};
#endif

	template <class T>
	inline constexpr bool is_function_v = is_function<T>::value;

	template <class T>
	struct is_member_function_pointer : false_type {};

	template <class T, class C>
	struct is_member_function_pointer<T C::*> : is_function<remove_cv_t<T>> {};

	template <class T>
	inline constexpr bool is_member_function_pointer_v = is_member_function_pointer<T>::value;

	template <class T>
	struct is_member_object_pointer : false_type {};

	template <class T, class C>
	struct is_member_object_pointer<T C::*> : bool_constant<!is_function_v<remove_cv_t<T>>> {};

	template <class T>
	inline constexpr bool is_member_object_pointer_v = is_member_object_pointer<T>::value;

	template <class T>
	struct is_member_pointer : disjunction<
		is_member_function_pointer<T>,
		is_member_object_pointer<T>
	>
	{};

	template <class T>
	inline constexpr bool is_member_pointer_v = is_member_pointer<T>::value;

	template <class T>
	struct is_class : bool_constant<__is_class(T)> {};

	template <class T>
	inline constexpr bool is_class_v = is_class<T>::value;

	template <class T>
	struct is_object : conjunction<
		negation<is_function<T>>,
		negation<is_reference<T>>,
		negation<is_void<T>>
	>
	{};

	template <class T>
	inline constexpr bool is_object_v = is_object<T>::value;

	template <class T>
	struct is_scalar : disjunction<
		is_arithmetic<T>,
		is_enum<T>,
		is_pointer<T>,
		is_member_pointer<T>,
		is_null_pointer<T>
	>
	{};

	template <class T>
	inline constexpr bool is_scalar_v = is_scalar<T>::value;

	template <class T>
	struct is_compound : negation<is_fundamental<T>> {};

	template <class T>
	inline constexpr bool is_compound_v = is_compound<T>::value;

	template <class T>
	struct is_trivially_copyable : bool_constant<__is_trivially_copyable(T)> {};

	template <class T>
	inline constexpr bool is_trivially_copyable_v = is_trivially_copyable<T>::value;

	template <class T>
	struct is_standard_layout : bool_constant<__is_standard_layout(T)> {};

	template <class T>
	inline constexpr bool is_standard_layout_v = is_standard_layout<T>::value;

	template <class T>
	struct is_pod : bool_constant<__is_pod(T)> {};

	template <class T>
	inline constexpr bool is_pod_v = is_pod<T>::value;

	template <class T>
	struct is_empty : bool_constant<__is_empty(T)> {};

	template <class T>
	inline constexpr bool is_empty_v = is_empty<T>::value;

	template <class T>
	struct is_polymorphic : bool_constant<__is_polymorphic(T)> {};

	template <class T>
	inline constexpr bool is_polymorphic_v = is_polymorphic<T>::value;

	template <class T>
	struct is_abstract : bool_constant<__is_abstract(T)> {};

	template <class T>
	inline constexpr bool is_abstract_v = is_abstract<T>::value;

	template <class T>
	struct is_final : bool_constant<__is_final(T)> {};

	template <class T>
	inline constexpr bool is_final_v = is_final<T>::value;

	template <class T>
	struct is_aggregate : bool_constant<__is_aggregate(T)> {};

	template <class T>
	inline constexpr bool is_aggregate_v = is_aggregate<T>::value;

	template <class T, class U>
	struct is_assignable : bool_constant<__is_assignable(T, U)> {};

	template <class T, class U>
	inline constexpr bool is_assignable_v = is_assignable<T, U>::value;
}

#endif // MY_TYPE_TRAITS_INCLUDED
