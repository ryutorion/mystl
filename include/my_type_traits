#ifndef MY_TYPE_TRAITS_INCLUDED
#define MY_TYPE_TRAITS_INCLUDED

namespace my
{
	template <class T, T v>
	struct integral_constant
	{
		static constexpr T value = v;
		using value_type = T;
		using type = integral_constant<T, v>;
		constexpr operator value_type() const noexcept { return value; }
		constexpr value_type operator ()() const noexcept { return value; }
	};

	template <bool B>
	using bool_constant = integral_constant<bool, B>;
	using true_type = bool_constant<true>;
	using false_type = bool_constant<false>;

	template <class T, class U>
	struct is_same : false_type {};

	template <class T>
	struct is_same<T, T> : true_type {};

	template <class T, class U>
	inline constexpr bool is_same_v = is_same<T, U>::value;

	template <class T>
	struct remove_const
	{
		using type = T;
	};

	template <class T>
	struct remove_const<const T>
	{
		using type = T;
	};

	template <class T>
	using remove_const_t = typename remove_const<T>::type;

	template <class T>
	struct remove_volatile
	{
		using type = T;
	};

	template <class T>
	struct remove_volatile<volatile T>
	{
		using type = T;
	};

	template <class T>
	using remove_volatile_t = typename remove_volatile<T>::type;

	template <class T>
	struct remove_cv
	{
		using type = remove_volatile_t<remove_const_t<T>>;
	};

	template <class T>
	using remove_cv_t = typename remove_cv<T>::type;

	template <class T>
	struct is_void : bool_constant<is_same_v<remove_cv_t<T>, void>> {};

	template <class T>
	inline constexpr bool is_void_v = is_void<T>::value;

	template <class T>
	struct is_null_pointer : bool_constant<is_same_v<remove_cv_t<T>, std::nullptr_t>> {};

	template <class T>
	inline constexpr bool is_null_pointer_v = is_null_pointer<T>::value;

	template <class T>
	struct is_integral : bool_constant<
		is_same_v<remove_cv_t<T>, bool> ||
		is_same_v<remove_cv_t<T>, char> ||
		is_same_v<remove_cv_t<T>, signed char> ||
		is_same_v<remove_cv_t<T>, unsigned char> ||
		is_same_v<remove_cv_t<T>, wchar_t> ||
#ifdef __cpp_char8_t
		is_same_v<remove_cv_t<T>, char8_t> ||
#endif
		is_same_v<remove_cv_t<T>, char16_t> ||
		is_same_v<remove_cv_t<T>, char32_t> ||
		is_same_v<remove_cv_t<T>, short> ||
		is_same_v<remove_cv_t<T>, unsigned short> ||
		is_same_v<remove_cv_t<T>, int> ||
		is_same_v<remove_cv_t<T>, unsigned int> ||
		is_same_v<remove_cv_t<T>, long> ||
		is_same_v<remove_cv_t<T>, unsigned long> ||
		is_same_v<remove_cv_t<T>, long long> ||
		is_same_v<remove_cv_t<T>, unsigned long long>
	>
	{};

	template <class T>
	inline constexpr bool is_integral_v = is_integral<T>::value;

	template <class T>
	struct is_floating_point : bool_constant<
		is_same_v<remove_cv_t<T>, float> ||
		is_same_v<remove_cv_t<T>, double> ||
		is_same_v<remove_cv_t<T>, long double>
	>
	{};

	template <class T>
	inline constexpr bool is_floating_point_v = is_floating_point<T>::value;

	template <class T>
	struct is_array : false_type {};

	template <class T, size_t N>
	struct is_array<T[N]> : true_type {};

	template <class T>
	struct is_array<T[]> : true_type {};

	template <class T>
	inline constexpr bool is_array_v = is_array<T>::value;
}

#endif // MY_TYPE_TRAITS_INCLUDED
