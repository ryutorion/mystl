// -*- C++ -*-
#ifndef MY_TYPE_TRAITS_INCLUDED
#define MY_TYPE_TRAITS_INCLUDED

namespace my
{
	template <class T, T v>
	struct integral_constant
	{
		static constexpr T value = v;
		using value_type = T;
		using type = integral_constant<T, v>;
		constexpr operator value_type() const noexcept { return value; }
		constexpr value_type operator ()() const noexcept { return value; }
	};

	template <bool B>
	using bool_constant = integral_constant<bool, B>;
	using true_type = bool_constant<true>;
	using false_type = bool_constant<false>;

	template <class T, class U>
	struct is_same : false_type {};

	template <class T>
	struct is_same<T, T> : true_type {};

	template <class T, class U>
	inline constexpr bool is_same_v = is_same<T, U>::value;

	template <class T>
	struct remove_const
	{
		using type = T;
	};

	template <class T>
	struct remove_const<const T>
	{
		using type = T;
	};

	template <class T>
	using remove_const_t = typename remove_const<T>::type;

	template <class T>
	struct add_const
	{
		using type = const T;
	};

	template <class T>
	using add_const_t = typename add_const<T>::type;

	template <class T>
	struct remove_volatile
	{
		using type = T;
	};

	template <class T>
	struct remove_volatile<volatile T>
	{
		using type = T;
	};

	template <class T>
	using remove_volatile_t = typename remove_volatile<T>::type;

	template <class T>
	struct add_volatile
	{
		using type = volatile T;
	};

	template <class T>
	using add_volatile_t = typename add_volatile<T>::type;

	template <class T>
	struct remove_cv
	{
		using type = remove_volatile_t<remove_const_t<T>>;
	};

	template <class T>
	using remove_cv_t = typename remove_cv<T>::type;

	template <class T>
	struct add_cv
	{
		using type = add_const_t<add_volatile_t<T>>;
	};

	template <class T>
	using add_cv_t = typename add_cv<T>::type;

	template <class T>
	struct is_void : bool_constant<is_same_v<remove_cv_t<T>, void>> {};

	template <class T>
	inline constexpr bool is_void_v = is_void<T>::value;

	template <class T>
	struct is_null_pointer : bool_constant<is_same_v<remove_cv_t<T>, std::nullptr_t>> {};

	template <class T>
	inline constexpr bool is_null_pointer_v = is_null_pointer<T>::value;

	template <class T>
	struct is_integral : bool_constant<
		is_same_v<remove_cv_t<T>, bool> ||
		is_same_v<remove_cv_t<T>, char> ||
		is_same_v<remove_cv_t<T>, signed char> ||
		is_same_v<remove_cv_t<T>, unsigned char> ||
		is_same_v<remove_cv_t<T>, wchar_t> ||
#ifdef __cpp_char8_t
		is_same_v<remove_cv_t<T>, char8_t> ||
#endif
		is_same_v<remove_cv_t<T>, char16_t> ||
		is_same_v<remove_cv_t<T>, char32_t> ||
		is_same_v<remove_cv_t<T>, short> ||
		is_same_v<remove_cv_t<T>, unsigned short> ||
		is_same_v<remove_cv_t<T>, int> ||
		is_same_v<remove_cv_t<T>, unsigned int> ||
		is_same_v<remove_cv_t<T>, long> ||
		is_same_v<remove_cv_t<T>, unsigned long> ||
		is_same_v<remove_cv_t<T>, long long> ||
		is_same_v<remove_cv_t<T>, unsigned long long>
	>
	{};

	template <class T>
	inline constexpr bool is_integral_v = is_integral<T>::value;

	template <class T>
	struct is_floating_point : bool_constant<
		is_same_v<remove_cv_t<T>, float> ||
		is_same_v<remove_cv_t<T>, double> ||
		is_same_v<remove_cv_t<T>, long double>
	>
	{};

	template <class T>
	inline constexpr bool is_floating_point_v = is_floating_point<T>::value;

	template <class T>
	struct is_array : false_type {};

	template <class T, size_t N>
	struct is_array<T[N]> : true_type {};

	template <class T>
	struct is_array<T[]> : true_type {};

	template <class T>
	inline constexpr bool is_array_v = is_array<T>::value;

	template <class T>
	struct is_pointer : false_type {};

	template <class T>
	struct is_pointer<T *> : true_type {};

	template <class T>
	struct is_pointer<T * const> : true_type {};

	template <class T>
	struct is_pointer<T * volatile> : true_type {};

	template <class T>
	struct is_pointer<T * const volatile> : true_type {};

	template <class T>
	inline constexpr bool is_pointer_v = is_pointer<T>::value;

	template <class T>
	struct is_lvalue_reference : false_type {};

	template <class T>
	struct is_lvalue_reference<T &> : true_type {};

	template <class T>
	inline constexpr bool is_lvalue_reference_v = is_lvalue_reference<T>::value;

	template <class T>
	struct is_rvalue_reference : false_type {};

	template <class T>
	struct is_rvalue_reference<T &&> : true_type {};

	template <class T>
	inline constexpr bool is_rvalue_reference_v = is_rvalue_reference<T>::value;

	template <class T>
	struct is_reference : bool_constant<
		is_lvalue_reference_v<T> ||
		is_rvalue_reference_v<T>
	>
	{};

	template <class T>
	inline constexpr bool is_reference_v = is_reference<T>::value;

	template <class T>
	struct is_arithmetic : bool_constant<
		is_integral_v<T> ||
		is_floating_point_v<T>
	>
	{};

	template <class T>
	inline constexpr bool is_arithmetic_v = is_arithmetic<T>::value;

	template <class T>
	struct is_fundamental : bool_constant<
		is_arithmetic_v<T> ||
		is_void_v<T> ||
		is_null_pointer_v<T>
	>
	{};

	template <class T>
	inline constexpr bool is_fundamental_v = is_fundamental<T>::value;

	template <class T>
	struct is_union : bool_constant<__is_union(T)> {};

	template <class T>
	inline constexpr bool is_union_v = is_union<T>::value;

	template <class T>
	struct is_enum : bool_constant<__is_enum(T)> {};

	template <class T>
	inline constexpr bool is_enum_v = is_enum<T>::value;

	template <class T>
	struct is_const : false_type
	{};

	template <class T>
	struct is_const<const T> : true_type
	{};

	template <class T>
	inline constexpr bool is_const_v = is_const<T>::value;

	template <class T>
	struct is_volatile : false_type
	{};

	template <class T>
	struct is_volatile<volatile T> : true_type
	{};

	template <class T>
	inline constexpr bool is_volatile_v = is_volatile<T>::value;

#ifdef _MSC_VER
	template <class T>
	struct is_function : false_type
	{};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...)> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) const> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) volatile> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) const volatile> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) &> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) const &> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) volatile &> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) const volatile &> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) &&> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) const &&> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) volatile &&> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) const volatile &&> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) const noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) volatile noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) const volatile noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) & noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) const & noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) volatile & noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) const volatile & noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) && noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) const && noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) volatile && noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params...) const volatile && noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...)> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) const> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) volatile> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) const volatile> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) &> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) const &> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) volatile &> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) const volatile &> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) &&> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) const &&> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) volatile &&> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) const volatile &&> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) const noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) volatile noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) const volatile noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) & noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) const & noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) volatile & noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) const volatile & noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) && noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) const && noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) volatile && noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret(Params..., ...) const volatile && noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...)> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) const> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) volatile> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) const volatile> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) &> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) const &> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) volatile &> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) const volatile &> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) &&> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) const &&> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) volatile &&> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) const volatile &&> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) const noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) volatile noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) const volatile noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) & noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) const & noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) volatile & noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) const volatile & noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) && noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) const && noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) volatile && noexcept> : true_type {};

	template <class Ret, class... Params>
	struct is_function<Ret __vectorcall (Params...) const volatile && noexcept> : true_type {};
#else
	template <class T>
	struct is_function : bool_constant<__is_function(T)> {};
#endif

	template <class T>
	inline constexpr bool is_function_v = is_function<T>::value;

	template <class T>
	struct is_member_function_pointer : false_type {};

	template <class T, class C>
	struct is_member_function_pointer<T C::*> : is_function<remove_cv_t<T>> {};

	template <class T>
	inline constexpr bool is_member_function_pointer_v = is_member_function_pointer<T>::value;

	template <class T>
	struct is_member_object_pointer : false_type {};

	template <class T, class C>
	struct is_member_object_pointer<T C::*> : bool_constant<!is_function_v<remove_cv_t<T>>> {};

	template <class T>
	inline constexpr bool is_member_object_pointer_v = is_member_object_pointer<T>::value;

	template <class T>
	struct is_member_pointer : bool_constant<
		is_member_function_pointer_v<T> ||
		is_member_object_pointer_v<T>
	>
	{};

	template <class T>
	inline constexpr bool is_member_pointer_v = is_member_pointer<T>::value;

	template <class T>
	struct is_class : bool_constant<__is_class(T)> {};

	template <class T>
	inline constexpr bool is_class_v = is_class<T>::value;

	template <class T>
	struct is_object : bool_constant<
		!is_function_v<T> &&
		!is_reference_v<T> &&
		!is_void_v<T>
	>
	{};

	template <class T>
	inline constexpr bool is_object_v = is_object<T>::value;

	template <class T>
	struct is_scalar : bool_constant<
		is_arithmetic_v<T> ||
		is_enum_v<T> ||
		is_pointer_v<T> ||
		is_member_pointer_v<T> ||
		is_null_pointer_v<T>
	>
	{};

	template <class T>
	inline constexpr bool is_scalar_v = is_scalar<T>::value;

	template <class T>
	struct is_compound : bool_constant<!is_fundamental_v<T>> {};

	template <class T>
	inline constexpr bool is_compound_v = is_compound<T>::value;
}

#endif // MY_TYPE_TRAITS_INCLUDED
